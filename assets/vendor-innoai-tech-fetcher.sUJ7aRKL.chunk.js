import{O as e,B as t,S as s,h as n,t as r,j as a,e as i,k as o,o as c}from"./vendor-rxjs.GGNOEYqY.chunk.js";import{b as u,w as h,d as p,h as d,a as l}from"./vendor-innoai-tech-lodash.Da8MPoqn.chunk.js";let f=(e,t)=>new g(e,t);class g extends e{constructor(e,t){super(e=>this._success$.subscribe(e)),this.createConfig=e,this.fetcher=t}requesting$=new t(!1);error$=new s;_success$=new s;_input$=new s;get operationID(){return this.createConfig.operationID}unsubscribe=this._input$.pipe(n(e=>(this.requesting$.next(!0),i(this.fetcher.request(this.createConfig(e))).pipe(r(e=>this._success$.next(e)),o(e=>(this.error$.next(e),c(e)))))),r(()=>{this.requesting$.next(!1)}),a()).subscribe();_prevInputs;next=e=>{let t=u(e)?e(this._prevInputs):e;this._prevInputs=t,this._input$.next(t)};toHref=e=>this.fetcher.toHref(this.createConfig(e))}let y=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e["Content-Type"]||e["content-type"]||""},b=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e["Content-Type"]&&(e["Content-Type"]=void 0),e["content-type"]&&(e["content-type"]=void 0)},m=e=>{let t=new URLSearchParams,s=(e,n)=>p(n)?void h(n,t=>{s(e,t)}):d(n)?void s(e,JSON.stringify(n)):void(!l(n)&&0!==`${n}`.length&&t.append(e,`${n}`));return h(e,(e,t)=>{s(t,e)}),t.toString()},w=(e,t)=>{if(y(t).includes("multipart/form-data")){b(t);let s=new FormData,n=(e,t)=>{t instanceof File||t instanceof Blob?s.append(e,t):p(t)?h(t,t=>n(e,t)):d(t)?s.append(e,JSON.stringify(t)):s.append(e,t)};return h(e,(e,t)=>n(t,e)),s}return y(t).includes("application/x-www-form-urlencoded")?m(e):p(e)||d(e)?JSON.stringify(e):e},$=e=>{let{paramsSerializer:t,transformRequestBody:s}=e,n=e=>{let s=t(e.params);return s.length&&!s.startsWith("?")&&(s="?"+s),`${e.url}${s}`},r=e=>s(e.body,e.headers||{});return{build:e=>e,toRequestBody:r,toHref:n,request:e=>fetch(n(e),{method:e.method,headers:e.headers||{},body:r(e)}).then(async t=>{let s;s=t.headers.get("Content-Type")?.includes("application/json")?await t.json():t.headers.get("Content-Type")?.includes("application/octet-stream")?await t.blob():await t.text();let n={config:e,status:t.status,headers:{}};for(let[e,s]of t.headers)n.headers[e]=s;return n.body=s,n}).then(e=>{if(e.status>=400)throw e.error=e.body,e;return e})}};export{f as a,$ as c,m as p,w as t};
